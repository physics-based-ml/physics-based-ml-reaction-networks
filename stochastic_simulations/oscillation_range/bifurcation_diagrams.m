(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Input::Initialization:: *)
pStrToNo[str_]:=ToExpression[StringReplace[StringTake[str,{-5,-1}],"p"->"."]]


(* ::Input::Initialization:: *)
importCa2i[volExp_,noIP3R_,fnameIdxStart_,fnameIdxEnd_,dataDir_,ip3s_]:=Module[
{dataCa2i,ip3,dataAll,i,fname}
,
SetDirectory[dataDir];

dataCa2i=Association[];

Monitor[
Do[
ip3=ip3s[[i]];
dataCa2i[ip3]={};

Do[

fname="vol_exp_"<>IntegerString[volExp,10,2]<>"/ip3r_"<>IntegerString[noIP3R,10,5]<>"/"<>ip3<>"/"<>IntegerString[fnameIdx,10,4]<>".txt";
If[!FileExistsQ[fname],
fname="vol_exp_"<>IntegerString[volExp,10,2]<>"/ip3r_"<>IntegerString[noIP3R,10,5]<>"/"<>ip3<>"/"<>IntegerString[fnameIdx,10,3]<>".txt";
];

dataAll=Import[fname,"Table"];
AppendTo[dataCa2i[ip3],dataAll[[2;;,{1,3}]]];

,{fnameIdx,fnameIdxStart,fnameIdxEnd}];
,{i,Length[ip3s]}];
,Row[{
Text["IP3 conc: "],
ProgressIndicator[i,{1,Length[ip3s]}]
}]];

Return[dataCa2i];
];


(* ::Input::Initialization:: *)
calculateMinsMaxs[dataCa2i_,ip3s_,volExp_,n_]:=Module[
{errMean,errStd,trajs,minCa2i,maxCa2i,avogadro,vol,errMax,errMin,mean,std,lowers,uppers,errLowers,errUppers,idx}
,
(* Mean, std *)
avogadro=6.02214076`*^23;
maxCa2i=Association[];
minCa2i=Association[];
errMax=Association[];
errMin=Association[];

Do[
trajs=dataCa2i[ip3][[;;,-400;;,2]];

(* Convert counts to concs in uM *)
vol=10^(-1*volExp);
trajs*=10^6/(vol*avogadro);

mean=Mean[trajs]//N;
std=StandardDeviation[trajs]//N;
errMean=std/Sqrt[n];
errStd=std/Sqrt[2*(n-1)];

(* Maxs mins *)
uppers=mean+std;
lowers=mean-std;
errUppers=Table[Sqrt[errMean[[i]]^2+errStd[[i]]^2],{i,Length[errMean]}];
errLowers=errUppers;

maxCa2i[ip3]=Max[uppers];
minCa2i[ip3]=Min[lowers];

(* Error in those *)
idx=Position[uppers,Max[uppers]][[1,1]];
errMax[ip3]=errUppers[[idx]];
idx=Position[lowers,Max[lowers]][[1,1]];
errMin[ip3]=errLowers[[idx]];

,{ip3, ip3s}];

Return[{maxCa2i,minCa2i,errMax,errMin}];
];


(* ::Input::Initialization:: *)
makeCa2iBifs[volExp_,noIP3RsAndDirs_,ip3s_,fnameIdxStart_,fnameIdxEnd_]:=Module[
{ca2iMin,ca2iMax,noIP3R,dataCa2i,ca2iMaxArr,ca2iMinArr,errMax,errMin,n,idxNoIP3R,dataDir,ip3Vals}
,
ca2iMin=Association[];
ca2iMax=Association[];

n=fnameIdxEnd-fnameIdxStart+1;

ip3Vals=Table[pStrToNo[x],{x,ip3s}];

Monitor[
Do[
{noIP3R,dataDir}=noIP3RsAndDirs[[idxNoIP3R]];

(* Import *)
dataCa2i=importCa2i[volExp,noIP3R,fnameIdxStart,fnameIdxEnd,dataDir,ip3s];

(* Bif diagram *)
{ca2iMaxArr,ca2iMinArr,errMax,errMin}=calculateMinsMaxs[dataCa2i,ip3s,volExp,n];

(* Reformat and store *)
ca2iMin[noIP3R]=Table[Around[ca2iMinArr[[i]],errMin[[i]]],{i,Length[ca2iMinArr]}];
ca2iMax[noIP3R]=Table[Around[ca2iMaxArr[[i]],errMax[[i]]],{i,Length[ca2iMaxArr]}];

ca2iMin[noIP3R]=Transpose[{ip3Vals,ca2iMin[noIP3R]}];
ca2iMax[noIP3R]=Transpose[{ip3Vals,ca2iMax[noIP3R]}];

,{idxNoIP3R,Length[noIP3RsAndDirs]}];

,Row[{
Text["# IP3R: "],
ProgressIndicator[idxNoIP3R,{1,Length[noIP3RsAndDirs]}]
}]];

Return[{ca2iMin,ca2iMax}];
]


(* ::Input::Initialization:: *)
exportDataBif[volExp_,ca2iMin_,ca2iMax_]:=Module[
{f,ip3Vals,ip3Val,min,max,s}
,
SetDirectory[NotebookDirectory[]];
Do[
f=OpenWrite["bifurcation_diagram_data/vol_"<>ToString[volExp]<>"_no_ip3r_"<>ToString[noIP3R]<>".txt"];

ip3Vals=ca2iMin[noIP3R][[;;,1]];
Do[
ip3Val=ip3Vals[[i]];
min=ca2iMin[noIP3R][[i,2]];
max=ca2iMax[noIP3R][[i,2]];
s=ToString[ip3Val]<>" "<>ToString[min["Value"]]<>" "<>ToString[min["Uncertainty"]]<>" "<>ToString[max["Value"]]<>" "<>ToString[max["Uncertainty"]]<>"\n";
WriteString[f,s]
,{i,Length[ip3Vals]}];

Close[f]
,{noIP3R,Keys[ca2iMin]}];
]


(* ::Input::Initialization:: *)
importDataBif[volExp_,noIP3Rs_]:=Module[
{ca2iMin,ca2iMax,f,data}
,
SetDirectory[NotebookDirectory[]];

ca2iMin=Association[];
ca2iMax=Association[];

Do[
f="bifurcation_diagram_data/vol_"<>ToString[volExp]<>"_no_ip3r_"<>ToString[noIP3R]<>".txt";
data=Import[f,"Table"];

ca2iMin[noIP3R]={};
ca2iMax[noIP3R]={};
Do[
AppendTo[ca2iMin[noIP3R],{x[[1]],Around[x[[2]],x[[3]]]}];
AppendTo[ca2iMax[noIP3R],{x[[1]],Around[x[[4]],x[[5]]]}];
,{x,data}];

,{noIP3R,noIP3Rs}];

Return[{ca2iMin,ca2iMax}];
];
