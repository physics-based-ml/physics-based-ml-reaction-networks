(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Input::Initialization:: *)
makeDataDesc[noSeeds_,volExp_,tptStart_,tptMax_,tptInterval_,dt_]:=<|
"noSeeds"->noSeeds,
"volExp"->volExp,
"tptStart"->tptStart,
"tptMax"->tptMax,
"tptInterval"->tptInterval,
"tpts"->Table[tpt,{tpt,tptStart,tptMax,tptInterval}],
"times"->Table[dt*tpt,{tpt,tptStart,tptMax,tptInterval}],
"noTpts"->Length[Table[tpt,{tpt,tptStart,tptMax,tptInterval}]]
|>;


(* ::Input::Initialization:: *)
createDirIfNeeded[cdir_]:=If[!DirectoryQ[cdir],CreateDirectory[cdir]];


(* ::Input::Initialization:: *)
getCacheDir[dataDesc_,noIP3R_]:=getCacheDirRaw[dataDesc["volExp"],noIP3R]


(* ::Input::Initialization:: *)
getCacheDir[dataDesc_]:=getCacheDirRaw[dataDesc["volExp"]]


(* ::Input::Initialization:: *)
getCacheDirRaw[volExp_]:=Module[
{cdir},
cdir="cache/vol_exp_"<>ToString[volExp]<>"/";
SetDirectory[NotebookDirectory[]];
Return[cdir]
]


(* ::Input::Initialization:: *)
getCacheDirRaw[volExp_,noIP3R_]:=Module[
{cdir},
cdir="cache/vol_exp_"<>ToString[volExp]<>"/"<>"no_ip3r_"<>ToString[noIP3R]<>"/";
SetDirectory[NotebookDirectory[]];
Return[cdir]
]


(* ::Input::Initialization:: *)
exportDataDesc[dataDesc_,fname_]:=Module[
{s}
,
SetDirectory[NotebookDirectory[]];
s="";
s=s<>"noSeeds "<>ToString[dataDesc["noSeeds"]]<>"\n";
s=s<>"volExp "<>ToString[dataDesc["volExp"]]<>"\n";
s=s<>"noIP3R "<>ToString[dataDesc["noIP3R"]]<>"\n";
s=s<>"tptStart "<>ToString[dataDesc["tptStart"]]<>"\n";
s=s<>"tptMax "<>ToString[dataDesc["tptMax"]]<>"\n";
s=s<>"tptInterval "<>ToString[dataDesc["tptInterval"]]<>"\n";

s=s<>"tpts "<>StringRiffle[ToString[#,FortranForm]&/@PaddedForm[#,16]&/@dataDesc["tpts"]," "]<>"\n";
s=s<>"times "<>StringRiffle[ToString[#,FortranForm]&/@PaddedForm[#,16]&/@dataDesc["times"]," "]<>"\n";

s=s<>"noTpts "<>ToString[dataDesc["noTpts"]]<>"\n";
Export[fname,s];
]


(* ::Input::Initialization:: *)
importDataDesc[fname_]:=Module[
{dataDesc,data,key}
,
dataDesc=Association[];

data=Import[fname,"Table"];
Do[
key=row[[1]];

If[key=="noSeeds",dataDesc[key]=IntegerPart[row[[2]]]];
If[key=="volExp",dataDesc[key]=IntegerPart[row[[2]]]];
If[key=="noIP3R",dataDesc[key]=IntegerPart[row[[2]]]];
If[key=="tptStart",dataDesc[key]=IntegerPart[row[[2]]]];
If[key=="tptMax",dataDesc[key]=IntegerPart[row[[2]]]];
If[key=="tptInterval",dataDesc[key]=IntegerPart[row[[2]]]];
If[key=="noTpts",dataDesc[key]=IntegerPart[row[[2]]]];
If[key=="tpts",dataDesc[key]=row[[2;;]]];
If[key=="times",dataDesc[key]=row[[2;;]]];

,{row,data}];

Return[dataDesc];
]


(* ::Input::Initialization:: *)
importData[dataDesc_,noIP3R_]:=Module[
{data,dat,noTpts,fname},

data={};
Monitor[
Do[
fname=IntegerString[seed,10,3]<>".txt";
If[!FileExistsQ[fname],
fname=IntegerString[seed,10,4]<>".txt"
];

dat=Transpose[Import[fname,"Table"][[2;;,{3,4}]]];
noTpts=Dimensions[dat][[2]];
AppendTo[dat,ConstantArray[noIP3R,noTpts]];

AppendTo[data,Transpose[dat]];
,{seed,0,dataDesc["noSeeds"]-1}];
,Row[{"Importing seed: ",ProgressIndicator[seed,{0,dataDesc["noSeeds"]-1}]}]];
data=Transpose[data];

Return[data]
]


(* ::Input::Initialization:: *)
getMLparams[data_,muh_,varh_]:=Module[
{bML,dataCov,q,lambdas,eigenvecsT,eigenvecs,varML,d,uq,lambdaq,weightML,muh0,varh0,params0,params,dirGoal,angle}
,
If[Length[muh]!=Length[varh],
Print["Dimensions for nh do not match"];
Return[];
];

d=Dimensions[data][[2]];

bML=Mean[data]//N;
dataCov=Covariance[data]//N;

dataCov[[1,3]]=0;
dataCov[[3,1]]=0;
dataCov[[2,3]]=0;
dataCov[[3,2]]=0;
dataCov[[3,3]]=10^-7;
(*
Print[bML];
Print[dataCov];
*)

q=Length[muh];

{lambdas,eigenvecsT}=Eigensystem[dataCov];
eigenvecsT=Table[Normalize[v],{v,eigenvecsT}];

(* Go through eigenvecs, adjust sign *)
dirGoal=Normalize[ConstantArray[1,d]];
Do[
angle=ArcCos[Dot[dirGoal,eigenvecsT[[i]]]];
If[Abs[angle]>Pi/2,
eigenvecsT[[i]]*=-1;
];
,{i,Length[eigenvecsT]}];

eigenvecs=Transpose[eigenvecsT];

varML=(1.0/(d-q))*Sum[lambdas[[j]],{j,q+1,d}];

uq=eigenvecs[[;;,;;q]];
lambdaq=DiagonalMatrix[lambdas[[;;q]]];
weightML=uq . Sqrt[lambdaq-varML*IdentityMatrix[q]];

muh0=ConstantArray[0,q];
varh0=IdentityMatrix[q];
params0=makeParams[Transpose[weightML],bML,varML,muh0,varh0];
params=convertParamsLatentSpace[params0,muh,varh];

Return[params]
]


(* ::Input::Initialization:: *)
makePStruct[LD_,LFLD_,LFDL_]:=<|
"LD"->LD,
"LFLD"->LFLD,
"LFDL"->LFDL
|>


(* ::Input::Initialization:: *)
makePStructFromLD[nv_,nh_,LD_]:=Module[
{LFLD,LFDL}
,
LFLD=Table[convertParamsToParamsLF[nv,nh,x],{x,LD}];
LFDL=convertLDtoDL[LFLD];

Return[makePStruct[LD,LFLD,LFDL]];
]


(* ::Input::Initialization:: *)
makePStructFromLFLD[nv_,nh_,LFLD_]:=Module[
{LD,LFDL}
,
LD=Table[convertParamsLFToParams[nv,nh,x],{x,LFLD}];
LFDL=convertLDtoDL[LFLD];

Return[makePStruct[LD,LFLD,LFDL]];
]


(* ::Input::Initialization:: *)
makePStructFromLFDL[nv_,nh_,LFDL_]:=Module[
{LD,LFLD}
,
LFLD=convertDLtoLD[LFDL];
LD=Table[convertParamsLFToParams[nv,nh,x],{x,LFLD}];

Return[makePStruct[LD,LFLD,LFDL]];
]


(* ::Input::Initialization:: *)
makeMStruct[LD_,LFLD_,LFDL_]:=<|
"LD"->LD,
"LFLD"->LFLD,
"LFDL"->LFDL
|>


(* ::Input::Initialization:: *)
makeMStructFromLD[nv_,nh_,LD_]:=Module[
{LFLD,LFDL}
,
LFLD=Table[convertMomentsToMomentsLF[nv,nh,x],{x,LD}];
LFDL=convertLDtoDL[LFLD];

Return[makeMStruct[LD,LFLD,LFDL]];
]


(* ::Input::Initialization:: *)
makeMStructFromLFLD[nv_,nh_,LFLD_]:=Module[
{LD,LFDL}
,
LD=Table[convertMomentsLFToMoments[nv,nh,x],{x,LFLD}];
LFDL=convertLDtoDL[LFLD];

Return[makeMStruct[LD,LFLD,LFDL]];
]


(* ::Input::Initialization:: *)
makeMStructFromLFDL[nv_,nh_,LFDL_]:=Module[
{LD,LFLD}
,
LFLD=convertDLtoLD[LFDL];
LD=Table[convertMomentsLFToMoments[nv,nh,x],{x,LFLD}];

Return[makeMStruct[LD,LFLD,LFDL]];
]


(* ::Input::Initialization:: *)
filter[x_,cutoff_]:=Module[
{y},
y=LowpassFilter[x,cutoff];
(*y[[1]]=x[[1]];*)
Return[y]
];


(* ::Input::Initialization:: *)
getFiltered[params_,cutoffs_]:=Module[
{filteredLFDL}
,
filteredLFDL=Association[];
Do[
If[NumberQ[cutoffs[pt]],
filteredLFDL[pt]=filter[params["LFDL"][pt],cutoffs[pt]],
filteredLFDL[pt]=params["LFDL"][pt]
];
,{pt,Keys[params["LFDL"]]}];

Return[makePStructFromLFDL[filteredLFDL]];
]


(* ::Input::Initialization:: *)
deriv[x_]:=(RotateLeft[x]-x)[[;;-2]]


(* ::Input::Initialization:: *)
getDerivs[params_]:=Module[
{derivsLFDL}
,
derivsLFDL=Association[];
Do[
derivsLFDL[k]=(RotateLeft[params["LFDL"][k]]-params["LFDL"][k])[[;;-2]]
,{k,Keys[params["LFDL"]]}];
Return[makePStructFromLFDL[derivsLFDL]]
]


(* ::Input::Initialization:: *)
labels=<|
"wt11"->"\!\(\*TemplateBox[Association[\"boxes\" -> FormBox[SubscriptBox[StyleBox[\"W\", \"TI\"], \"11\"], TraditionalForm], \"errors\" -> {}, \"input\" -> \"W_{11}\", \"state\" -> \"Boxes\"],\n\"TeXAssistantTemplate\"]\)",
"wt12"->"\!\(\*TemplateBox[Association[\"boxes\" -> FormBox[SubscriptBox[StyleBox[\"W\", \"TI\"], \"12\"], TraditionalForm], \"errors\" -> {}, \"input\" -> \"W_{12}\", \"state\" -> \"Boxes\"],\n\"TeXAssistantTemplate\"]\)",
"wt13"->"\!\(\*TemplateBox[Association[\"boxes\" -> FormBox[SubscriptBox[StyleBox[\"W\", \"TI\"], \"13\"], TraditionalForm], \"errors\" -> {}, \"input\" -> \"W_{13}\", \"state\" -> \"Boxes\"],\n\"TeXAssistantTemplate\"]\)",
"wt21"->"\!\(\*TemplateBox[Association[\"boxes\" -> FormBox[SubscriptBox[StyleBox[\"W\", \"TI\"], \"21\"], TraditionalForm], \"errors\" -> {}, \"input\" -> \"W_{21}\", \"state\" -> \"Boxes\"],\n\"TeXAssistantTemplate\"]\)",
"wt22"->"\!\(\*TemplateBox[Association[\"boxes\" -> FormBox[SubscriptBox[StyleBox[\"W\", \"TI\"], \"22\"], TraditionalForm], \"errors\" -> {}, \"input\" -> \"W_{22}\", \"state\" -> \"Boxes\"],\n\"TeXAssistantTemplate\"]\)",
"wt23"->"\!\(\*TemplateBox[Association[\"boxes\" -> FormBox[SubscriptBox[StyleBox[\"W\", \"TI\"], \"23\"], TraditionalForm], \"errors\" -> {}, \"input\" -> \"W_{23}\", \"state\" -> \"Boxes\"],\n\"TeXAssistantTemplate\"]\)",
"w11"->"\!\(\*TemplateBox[Association[\"boxes\" -> FormBox[SubscriptBox[StyleBox[\"W\", \"TI\"], \"11\"], TraditionalForm], \"errors\" -> {}, \"input\" -> \"W_{11}\", \"state\" -> \"Boxes\"],\n\"TeXAssistantTemplate\"]\)",
"w21"->"\!\(\*TemplateBox[Association[\"boxes\" -> FormBox[SubscriptBox[StyleBox[\"W\", \"TI\"], \"12\"], TraditionalForm], \"errors\" -> {}, \"input\" -> \"W_{12}\", \"state\" -> \"Boxes\"],\n\"TeXAssistantTemplate\"]\)",
"muh1"->"\!\(\*TemplateBox[Association[\"boxes\" -> FormBox[SubscriptBox[\"\[Mu]\", RowBox[{StyleBox[\"h\", \"TI\"], \",\", \"1\"}]], TraditionalForm], \"errors\" -> {}, \"input\" -> \"\\\\mu_{h,1}\", \"state\" -> \"Boxes\"],\n\"TeXAssistantTemplate\"]\)",
"muh2"->"\!\(\*TemplateBox[Association[\"boxes\" -> FormBox[SubscriptBox[\"\[Mu]\", RowBox[{StyleBox[\"h\", \"TI\"], \",\", \"2\"}]], TraditionalForm], \"errors\" -> {}, \"input\" -> \"\\\\mu_{h,2}\", \"state\" -> \"Boxes\"],\n\"TeXAssistantTemplate\"]\)",
"varh11"->"\!\(\*TemplateBox[Association[\"boxes\" -> FormBox[SubscriptBox[\"\[CapitalSigma]\", RowBox[{StyleBox[\"h\", \"TI\"], \",\", \"1\", \",\", \"1\"}]], TraditionalForm], \"errors\" -> {}, \"input\" -> \"\\\\Sigma_{h,1,1}\", \"state\" -> \"Boxes\"],\n\"TeXAssistantTemplate\"]\)",
"varh12"->"\!\(\*TemplateBox[Association[\"boxes\" -> FormBox[SubscriptBox[\"\[CapitalSigma]\", RowBox[{StyleBox[\"h\", \"TI\"], \",\", \"1\", \",\", \"2\"}]], TraditionalForm], \"errors\" -> {}, \"input\" -> \"\\\\Sigma_{h,1,2}\", \"state\" -> \"Boxes\"],\n\"TeXAssistantTemplate\"]\)",
"varh22"->"\!\(\*TemplateBox[Association[\"boxes\" -> FormBox[SubscriptBox[\"\[CapitalSigma]\", RowBox[{StyleBox[\"h\", \"TI\"], \",\", \"2\", \",\", \"2\"}]], TraditionalForm], \"errors\" -> {}, \"input\" -> \"\\\\Sigma_{h,2,2}\", \"state\" -> \"Boxes\"],\n\"TeXAssistantTemplate\"]\)",
"b1"->"\!\(\*TemplateBox[Association[\"boxes\" -> FormBox[SubscriptBox[StyleBox[\"b\", \"TI\"], \"1\"], TraditionalForm], \"errors\" -> {}, \"input\" -> \"b_1\", \"state\" -> \"Boxes\"],\n\"TeXAssistantTemplate\"]\)",
"b2"->"\!\(\*TemplateBox[Association[\"boxes\" -> FormBox[SubscriptBox[StyleBox[\"b\", \"TI\"], \"2\"], TraditionalForm], \"errors\" -> {}, \"input\" -> \"b_2\", \"state\" -> \"Boxes\"],\n\"TeXAssistantTemplate\"]\)",
"b3"->"\!\(\*TemplateBox[Association[\"boxes\" -> FormBox[SubscriptBox[StyleBox[\"b\", \"TI\"], \"3\"], TraditionalForm], \"errors\" -> {}, \"input\" -> \"b_3\", \"state\" -> \"Boxes\"],\n\"TeXAssistantTemplate\"]\)",
"sig2"->"\!\(\*TemplateBox[Association[\"boxes\" -> FormBox[SuperscriptBox[\"\[Sigma]\", \"2\"], TraditionalForm], \"errors\" -> {}, \"input\" -> \"\\\\sigma^2\", \"state\" -> \"Boxes\"],\n\"TeXAssistantTemplate\"]\)",
"mu1"->"\!\(\*TemplateBox[Association[\"boxes\" -> FormBox[SubscriptBox[\"\[Mu]\", RowBox[{StyleBox[\"v\", \"TI\"], \",\", \"1\"}]], TraditionalForm], \"errors\" -> {}, \"input\" -> \"\\\\mu_{v,1}\", \"state\" -> \"Boxes\"],\n\"TeXAssistantTemplate\"]\)",
"mu2"->"\!\(\*TemplateBox[Association[\"boxes\" -> FormBox[SubscriptBox[\"\[Mu]\", RowBox[{StyleBox[\"v\", \"TI\"], \",\", \"2\"}]], TraditionalForm], \"errors\" -> {}, \"input\" -> \"\\\\mu_{v,2}\", \"state\" -> \"Boxes\"],\n\"TeXAssistantTemplate\"]\)",
"mu3"->"\!\(\*TemplateBox[Association[\"boxes\" -> FormBox[SubscriptBox[\"\[Mu]\", RowBox[{StyleBox[\"v\", \"TI\"], \",\", \"3\"}]], TraditionalForm], \"errors\" -> {}, \"input\" -> \"\\\\mu_{v,3}\", \"state\" -> \"Boxes\"],\n\"TeXAssistantTemplate\"]\)",
"var11"->"\!\(\*TemplateBox[Association[\"boxes\" -> FormBox[SubscriptBox[\"\[CapitalSigma]\", RowBox[{StyleBox[\"v\", \"TI\"], \",\", \"1\", \",\", \"1\"}]], TraditionalForm], \"errors\" -> {}, \"input\" -> \"\\\\Sigma_{v,1,1}\", \"state\" -> \"Boxes\"],\n\"TeXAssistantTemplate\"]\)",
"var12"->"\!\(\*TemplateBox[Association[\"boxes\" -> FormBox[SubscriptBox[\"\[CapitalSigma]\", RowBox[{StyleBox[\"v\", \"TI\"], \",\", \"1\", \",\", \"2\"}]], TraditionalForm], \"errors\" -> {}, \"input\" -> \"\\\\Sigma_{v,1,2}\", \"state\" -> \"Boxes\"],\n\"TeXAssistantTemplate\"]\)",
"var13"->"\!\(\*TemplateBox[Association[\"boxes\" -> FormBox[SubscriptBox[\"\[CapitalSigma]\", RowBox[{StyleBox[\"v\", \"TI\"], StyleBox[\"h\", \"TI\"], \",\", \"1\"}]], TraditionalForm], \"errors\" -> {}, \"input\" -> \"\\\\Sigma_{vh,1}\", \"state\" -> \"Boxes\"],\n\"TeXAssistantTemplate\"]\)",
"var22"->"\!\(\*TemplateBox[Association[\"boxes\" -> FormBox[SubscriptBox[\"\[CapitalSigma]\", RowBox[{StyleBox[\"v\", \"TI\"], \",\", \"2\", \",\", \"2\"}]], TraditionalForm], \"errors\" -> {}, \"input\" -> \"\\\\Sigma_{v,2,2}\", \"state\" -> \"Boxes\"],\n\"TeXAssistantTemplate\"]\)",
"var23"->"\!\(\*TemplateBox[Association[\"boxes\" -> FormBox[SubscriptBox[\"\[CapitalSigma]\", RowBox[{StyleBox[\"v\", \"TI\"], StyleBox[\"h\", \"TI\"], \",\", \"2\"}]], TraditionalForm], \"errors\" -> {}, \"input\" -> \"\\\\Sigma_{vh,2}\", \"state\" -> \"Boxes\"],\n\"TeXAssistantTemplate\"]\)",
"var33"->"\!\(\*TemplateBox[Association[\"boxes\" -> FormBox[SubscriptBox[\"\[CapitalSigma]\", RowBox[{StyleBox[\"h\", \"TI\"], \",\", \"1\", \",\", \"1\"}]], TraditionalForm], \"errors\" -> {}, \"input\" -> \"\\\\Sigma_{h,1,1}\", \"state\" -> \"Boxes\"],\n\"TeXAssistantTemplate\"]\)"
|>;


(* ::Input::Initialization:: *)
makeLF[nv_,nh_]:=Module[
{lf}
,
lf={};

Do[
Do[
AppendTo[lf,"wt"<>ToString[ih]<>ToString[iv]];
,{ih,nh}];
,{iv,nv}];

AppendTo[lf,"sig2"];

Do[
Do[
AppendTo[lf,"varh"<>ToString[ih1]<>ToString[ih2]];
,{ih2,ih1,nh}];
,{ih1,nh}];

Do[
AppendTo[lf,"b"<>ToString[iv]];
,{iv,nv}];

Do[
AppendTo[lf,"muh"<>ToString[ih]];
,{ih,nh}];

Return[lf]
];


(* ::Input::Initialization:: *)
convertParamsToParamsLF[nv_,nh_,x_]:=Module[
{ass},
ass=Association[];

Do[
Do[
ass["wt"<>ToString[ih]<>ToString[iv]]=x["wt"][[ih,iv]];
,{ih,nh}];
,{iv,nv}];

ass["sig2"]=x["sig2"];

Do[
Do[
ass["varh"<>ToString[ih1]<>ToString[ih2]]=x["varh"][[ih1,ih2]];
,{ih2,ih1,nh}];
,{ih1,nh}];

Do[
ass["b"<>ToString[iv]]=x["b"][[iv]];
,{iv,nv}];

Do[
ass["muh"<>ToString[ih]]=x["muh"][[ih]];
,{ih,nh}];

Return[ass];
];


(* ::Input::Initialization:: *)
convertParamsLFToParams[nv_,nh_,x_]:=Module[
{ass},
ass=Association[];

ass["wt"]=Table[Table[x["wt"<>ToString[ih]<>ToString[iv]],{iv,nv}],{ih,nh}];
ass["muh"]=Table[x["muh"<>ToString[ih]],{ih,nh}];
ass["varh"]=Table[Table[x["varh"<>ToString[Min[ih1,ih2]]<>ToString[Max[ih1,ih2]]],{ih2,nh}],{ih1,nh}];
ass["b"]=Table[x["b"<>ToString[iv]],{iv,nv}];
ass["sig2"]=x["sig2"];

Return[ass];
];


(* ::Input::Initialization:: *)
makeLFM[nv_,nh_]:=Module[
{nM,lfm}
,
nM=nv+nh;
lfm={};
Do[
AppendTo[lfm,"mu"<>ToString[i]];
,{i,nM}];
Do[
Do[
AppendTo[lfm,"var"<>ToString[i]<>ToString[j]];
,{j,i,nM}]
,{i,nM}];
Return[lfm]
];


(* ::Input::Initialization:: *)
convertMomentsToMomentsLF[nv_,nh_,x_]:=Module[
{a,nM}
,
nM=nv+nh;
a=Association[];
Do[
a["mu"<>ToString[i]]=x["mu"][[i]];
,{i,nM}];
Do[
Do[
a["var"<>ToString[i]<>ToString[j]]=x["var"][[i,j]];
,{j,i,nM}];
,{i,nM}];
Return[a];
];


(* ::Input::Initialization:: *)
convertMomentsLFToMoments[nv_,nh_,x_]:=Module[
{a,nM}
,
nM=nv+nh;
a=Association[];
a["mu"]=Table[x["mu"<>ToString[i]],{i,nM}];
a["var"]=Table[Table[x["var"<>ToString[Min[i,j]]<>ToString[Max[i,j]]],{j,nM}],{i,nM}];
Return[a]
];


(* ::Input::Initialization:: *)
convertLFToArr[lfDict_]:=Flatten[Table[lfDict[x],{x,Keys[lfDict]}]]


(* ::Input::Initialization:: *)
convertArrToLF[lf_,arr_]:=Module[
{d},
d=Association[];
Do[
d[lf[[i]]]=arr[[i]];
,{i,Length[lf]}];

Return[d];
]


(* ::Input::Initialization:: *)
convertLDtoDL[ld_]:=Module[
{dl}
,
dl=Association[];
Do[
dl[k]=Table[x[k],{x,ld}];
,{k,Keys[ld[[1]]]}];

Return[dl]
]


(* ::Input::Initialization:: *)
convertDLtoLD[dl_]:=Module[
{ld,d}
,
ld={};
Do[
d=Association[];
Do[
d[k]=dl[k][[tpt]];
,{k,Keys[dl]}];
AppendTo[ld,d];
,{tpt,Length[Values[dl][[1]]]}];

Return[ld];
]


(* ::Input::Initialization:: *)
makeParams[wt_,b_,sig2_,muh_,varh_]:=Sort[<|
"wt"->wt,
"varh"->varh,
"b"->b,
"muh"->muh,
"sig2"->sig2
|>];


(* ::Input::Initialization:: *)
makeParamMoments[varvh_,varvbar_,varh_,muv_,muh_]:=Sort[<|
"varvh"->varvh,
"varvbar"->varvbar,
"varh"->varh,
"muv"->muv,
"muh"->muh
|>];


(* ::Input::Initialization:: *)
makeTestParams[]:=makeParams[
{{-8.711282995418768`,0.010592764861612711`}},
{25587.27503284982`,3043.731028277688`},
271.17229778145855`,
{2479.425538604203`},
{{675.5165123780746`}}
];


makeTestParams[]


(* ::Input::Initialization:: *)
convertParamsLatentSpace[params1_,muh2_,varh2_]:=Module[
{wt2,b2,b1,wt1,muh1,varh1},

b1=params1["b"];
wt1=params1["wt"];
muh1=params1["muh"];
varh1=params1["varh"];

b2=b1+Transpose[wt1] . muh1-Transpose[wt1] . Sqrt[params1["varh"]] . Inverse[Sqrt[varh2]] . muh2;
wt2=Inverse[Sqrt[varh2]] . Sqrt[varh1] . wt1;

Return[makeParams[wt2,b2,params1["sig2"],muh2,varh2]];
]


(* ::Input::Initialization:: *)
makeParamsTE[fwt_,fb_,fsig2_,fmuh_,fvarh_]:=<|
"fwt"->fwt,
"fb"->fb,
"fsig2"->fsig2,
"fmuh"->fmuh,
"fvarh"->fvarh
|>;


(* ::Input::Initialization:: *)
convertParamsTELatentSpace[params1_,params1TE_,params2_,fmuh2_,fvarh2_]:=convertParamsTELatentSpace[params1,params1TE,params2["muh"],params2["varh"],fmuh2,fvarh2];


(* ::Input::Initialization:: *)
convertParamsTELatentSpace[params1_,params1TE_,muh2_,varh2_,fmuh2_,fvarh2_]:=Module[
{fb1,fwt1,fmuh1,fvarh1,fb2,muh1,wt1,varh1,fwt2},

fb1=params1TE["fb"];
fwt1=params1TE["fwt"];
fmuh1=params1TE["fmuh"];
fvarh1=params1TE["fvarh"];

muh1=params1["muh"];
wt1=params1["wt"];
varh1=params1["varh"];

fb2=fb1+Transpose[fwt1] . muh1+Transpose[wt1] . fmuh1-Transpose[fwt1] . Sqrt[varh1] . Inverse[Sqrt[varh2]] . muh2-0.5*Transpose[wt1] . Inverse[Sqrt[varh1]] . fvarh1 . Inverse[Sqrt[varh2]] . muh2+0.5*Transpose[wt1] . Sqrt[varh1] . Inverse[Sqrt[varh2]]^3 . fvarh2 . muh2-Transpose[wt1] . Sqrt[varh1] . Inverse[Sqrt[varh2]] . fmuh2;

fwt2=-0.5*Inverse[Sqrt[varh2]]^3 . fvarh2 . Sqrt[varh1] . wt1+0.5*Inverse[Sqrt[varh2]] . Inverse[Sqrt[varh1]] . fvarh1 . wt1+Inverse[Sqrt[varh2]] . Sqrt[varh1] . fwt1;

Return[makeParamsTE[fwt2,fb2,params1TE["fsig2"],fmuh2,fvarh2]];
]


(* ::Input::Initialization:: *)
convertParamsToMoments[nv_,params_]:=Module[
{ass,varvh,varv,varh,muv,muh}
,

varvh=params["varh"] . params["wt"];
varv=Transpose[params["wt"]] . params["varh"] . params["wt"]+params["sig2"]*IdentityMatrix[nv];
varh=params["varh"];
muv=params["b"]+Transpose[params["wt"]] . params["muh"];
muh=params["muh"];

ass=Association[];
ass["muv"]=muv;
ass["muh"]=muh;
ass["varv"]=varv;
ass["varvh"]=varvh;
ass["varh"]=varh;
ass["mu"]=Join[muv,muh];
ass["var"]=ArrayFlatten[{{varv,Transpose[varvh]},{varvh,varh}}];

Return[ass]
]


(* ::Input::Initialization:: *)
convertMomentsToParams[moments_,nv_]:=Module[
{params,varvh,varv,varh,muv,muh,wt,b,sig2}
,

muv=moments["mu"][[;;nv]];
muh=moments["mu"][[nv+1;;]];
varv=moments["var"][[;;nv,;;nv]];
varvh=moments["var"][[nv+1;;,;;nv]];
varh=moments["var"][[nv+1;;,nv+1;;]];

wt=Inverse[varh] . varvh;
b=muv-Transpose[varvh] . Inverse[varh] . muh;
sig2=(varv-Transpose[varvh] . Inverse[varh] . varvh)[[1,1]];
params=makeParams[wt,b,sig2,muh,varh];

Return[params]
]


(* ::Input::Initialization:: *)
convertParamsToParamMoments[nv_,params_]:=Module[
{moments,paramMoments}
,
moments=convertParamsToMoments[nv,params];
paramMoments=<|
"varvh"->moments["var"][[nv+1;;,;;nv]],
"varvbar"->Total[Diagonal[moments["var"][[;;nv,;;nv]]]],
"varh"->moments["var"][[nv+1;;,nv+1;;]],
"muv"->moments["mu"][[;;nv]],
"muh"->moments["mu"][[nv+1;;]]
|>;
Return[paramMoments]
]


(* ::Input::Initialization:: *)
convertParamMomentsToParams[nv_,paramMoments_]:=Module[
{varvbar,varvh,varh,params,muh,sig2,wt,b}
,
varvbar=paramMoments["varvbar"];
varvh=paramMoments["varvh"];
varh=paramMoments["varh"];

muh=paramMoments["muh"];
sig2=(varvbar-Total[Diagonal[Transpose[varvh] . Inverse[varh] . varvh]])/nv;
wt=Inverse[varh] . varvh;
b=paramMoments["muv"]-Transpose[varvh] . Inverse[varh] . paramMoments["muh"];
params=makeParams[wt,b,sig2,muh,varh];

Return[params];
];


(* ::Input::Initialization:: *)
testConvertParamsToParamMoments[nv_]:=Module[
{params,paramMoments,paramsCheck}
,
params=makeTestParams[];
paramMoments=convertParamsToParamMoments[nv,params];
paramsCheck=convertParamMomentsToParams[nv,paramMoments];

On[Assert];
Assert[params==paramsCheck];
Off[Assert];
];


(* ::Input::Initialization:: *)
convertParamsToNMoments[nv_,params_]:=Module[
{moments,nmoments,kpv}
,
moments=convertParamsToMoments[nv,params];

nmoments=Association[];
nmoments["mu"]=moments["mu"];

kpv=KroneckerProduct[moments["mu"],moments["mu"]];

nmoments["nvar"]=moments["var"]+kpv;

Return[nmoments];
];


(* ::Input::Initialization:: *)
convertParamsToNMoments3[nv_,nh_,params_]:=Module[
{nMoments,nMoments3,n,mu,nvar},
nMoments=convertParamsToNMoments[nv,params];

mu=nMoments["mu"];
nvar=nMoments["nvar"];

n=nv+nh;
nMoments3=Association[];
Do[
Do[
Do[
nMoments3[{in,jn,kn}]=-2*mu[[in]]*mu[[jn]]*mu[[kn]]+mu[[in]]*nvar[[jn,kn]]+mu[[jn]]*nvar[[in,kn]]+mu[[kn]]*nvar[[in,jn]];
,{kn,jn,n}];
,{jn,in,n}];
,{in,n}];

Return[nMoments3]
]


(* ::Input::Initialization:: *)
getNMoment3[nMoments3_,idxs_]:=nMoments3[Sort[idxs]]


(* ::Input::Initialization:: *)
makeRxnDeathNMomentsTE[nv_,nh_,nMoments_,nMoments3_,iSp_]:=Module[
{te,mu,nvar,n}
,
n=nv+nh;

(* Means *)
mu=ConstantArray[0,n];
mu[[iSp]]=-nMoments["mu"][[iSp]];

(* Variances *)
nvar=ConstantArray[0,{n,n}];
nvar[[iSp,iSp]]=-2*nMoments["nvar"][[iSp,iSp]]+nMoments["mu"][[iSp]];
Do[
If[iSp==jSp,Continue[]];
nvar[[iSp,jSp]]=-nMoments["nvar"][[iSp,jSp]];
nvar[[jSp,iSp]]=nvar[[iSp,jSp]];
,{jSp,n}];

te=Association[];
te["muTE"]=mu;
te["nvarTE"]=nvar;

Return[te]
]


(* ::Input::Initialization:: *)
makeRxnEatNMomentsTE[nv_,nh_,nMoments_,nMoments3_,iHunter_,iPrey_]:=Module[
{te,mu,nvar,n}
,
n=nv+nh;

(* Means *)
mu=ConstantArray[0,n];
mu[[iPrey]]=-nMoments["nvar"][[iHunter,iPrey]];
mu[[iHunter]]=nMoments["nvar"][[iHunter,iPrey]];

(* Variances *)
nvar=ConstantArray[0,{n,n}];
nvar[[iPrey,iPrey]]=-2*getNMoment3[nMoments3,{iPrey,iPrey,iHunter}]+nMoments["nvar"][[iHunter,iPrey]];
nvar[[iHunter,iHunter]]=2*getNMoment3[nMoments3,{iHunter,iHunter,iPrey}]+nMoments["nvar"][[iHunter,iPrey]];
nvar[[iHunter,iPrey]]=-getNMoment3[nMoments3,{iHunter,iHunter,iPrey}]+getNMoment3[nMoments3,{iHunter,iPrey,iPrey}]-nMoments["nvar"][[iHunter,iPrey]];
nvar[[iPrey,iHunter]]=nvar[[iHunter,iPrey]];

Do[
If[
iPrey!=jSp&&iHunter!=jSp,

nvar[[iPrey,jSp]]=-getNMoment3[nMoments3,{jSp,iPrey,iHunter}];
nvar[[jSp,iPrey]]=nvar[[iPrey,jSp]];

nvar[[iHunter,jSp]]=getNMoment3[nMoments3,{jSp,iPrey,iHunter}];
nvar[[jSp,iHunter]]=nvar[[iHunter,jSp]];
];
,{jSp,n}];

te=Association[];
te["muTE"]=mu;
te["nvarTE"]=nvar;

Return[te]
]


(* ::Input::Initialization:: *)
makeRxnBirthNMomentsTE[nv_,nh_,nMoments_,nMoments3_,iSp_]:=Module[
{te,mu,nvar,n}
,
n=nv+nh;

(* Means *)
mu=ConstantArray[0,n];
mu[[iSp]]=nMoments["mu"][[iSp]];

(* Variances *)
nvar=ConstantArray[0,{n,n}];
nvar[[iSp,iSp]]=2*nMoments["nvar"][[iSp,iSp]]+nMoments["mu"][[iSp]];
Do[
If[iSp==jSp,Continue[]];
nvar[[iSp,jSp]]=nMoments["nvar"][[iSp,jSp]];
nvar[[jSp,iSp]]=nvar[[iSp,jSp]];
,{jSp,n}];

te=Association[];
te["muTE"]=mu;
te["nvarTE"]=nvar;

Return[te]
]


(* ::Input::Initialization:: *)
convertNMomentsTEtoMomentsTE[moments_,rxnNMomentsTE_]:=Module[
{rxnMomentsTE,kpv}
,
rxnMomentsTE=Association[];
rxnMomentsTE["muTE"]=rxnNMomentsTE["muTE"];

kpv=KroneckerProduct[rxnNMomentsTE["muTE"],moments["mu"]]+KroneckerProduct[moments["mu"],rxnNMomentsTE["muTE"]];
rxnMomentsTE["varTE"]=rxnNMomentsTE["nvarTE"]-kpv;

Return[rxnMomentsTE];
]


(* ::Input::Initialization:: *)
convertMomentsTEtoParamMomentsTE[nv_,params_,rxnMomentsTE_]:=Module[
{rxnParamMomentsTE,kpv}
,

rxnParamMomentsTE=Association[];
rxnParamMomentsTE["muvTE"]=rxnMomentsTE["muTE"][[;;nv]];
rxnParamMomentsTE["muhTE"]=rxnMomentsTE["muTE"][[nv+1;;]];

rxnParamMomentsTE["varvhTE"]=rxnMomentsTE["varTE"][[nv+1;;,;;nv]];
rxnParamMomentsTE["varvbarTE"]=Total[Diagonal[rxnMomentsTE["varTE"][[;;nv,;;nv]]]];
rxnParamMomentsTE["varhTE"]=rxnMomentsTE["varTE"][[nv+1;;,nv+1;;]];

Return[rxnParamMomentsTE];
]


(* ::Input::Initialization:: *)
convertParamMomentsTEtoParamsTE[nv_,paramMoments_,rxnParamMomentsTE_]:=Module[
{rxnParamsTE,varh,varhInv,varvh,varvhTE,varhTE,m,varvbarTE,muhTE,muvTE,muh}
,
varvhTE=rxnParamMomentsTE["varvhTE"];
varhTE=rxnParamMomentsTE["varhTE"];
varvbarTE=rxnParamMomentsTE["varvbarTE"];
muhTE=rxnParamMomentsTE["muhTE"];
muvTE=rxnParamMomentsTE["muvTE"];
varh=paramMoments["varh"];
varhInv=Inverse[varh];
muh=paramMoments["muh"];
varvh=paramMoments["varvh"];

rxnParamsTE=Association[];
rxnParamsTE["bTE"]=muvTE-Transpose[varvhTE] . varhInv . muh+Transpose[varvh] . varhInv . varhTE . varhInv . muh-Transpose[varvh] . varhInv . muhTE;
rxnParamsTE["muhTE"]=muhTE;
rxnParamsTE["varhTE"]=varhTE;
rxnParamsTE["wtTE"]=-varhInv . varhTE . varhInv . varvh+varhInv . varvhTE;

m=Transpose[varvhTE] . varhInv . varvh-Transpose[varvh] . varhInv . varhTE . varhInv . varvh+Transpose[varvh] . varhInv . varvhTE;
rxnParamsTE["sig2TE"]=(1.0/nv)*varvbarTE-(1.0/nv)*Total[Diagonal[m]];

Return[rxnParamsTE]
]


(* ::Input::Initialization:: *)
getParamsTEofRxns[nv_,nh_,params_,makeRxnsNMomentsTE_]:=Module[
{nMoments,nMoments3,rxnsNMomentsTE,rxnsParamMomentsTE,rxnMomentsTE,moments,rxnParamMomentsTE,paramMoments,rxnsParamsTE}
,
paramMoments=convertParamsToParamMoments[nv,params];
nMoments=convertParamsToNMoments[nv,params];
nMoments3=convertParamsToNMoments3[nv,nh,params];
moments=convertParamsToMoments[nv,params];

rxnsNMomentsTE=makeRxnsNMomentsTE[nMoments,nMoments3];

rxnsParamsTE=Table[
rxnMomentsTE=convertNMomentsTEtoMomentsTE[moments,rxnNMomentsTE];
rxnParamMomentsTE=convertMomentsTEtoParamMomentsTE[nv,params,rxnMomentsTE];
convertParamMomentsTEtoParamsTE[nv,paramMoments,rxnParamMomentsTE]
,{rxnNMomentsTE,rxnsNMomentsTE}];

Return[rxnsParamsTE];
]
